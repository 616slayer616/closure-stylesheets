/*
 * Copyright 2009 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.common.css.compiler.ast;

import com.google.common.base.Preconditions;
import com.google.common.css.SourceCodeLocation;

/**
 * GSS parser error description.
 *
 */
public class GssError implements Comparable<GssError> {
  private String message;
  private SourceCodeLocation location;
  private String line = null;
  private String format = null;

  public GssError(String message, SourceCodeLocation location) {
    Preconditions.checkNotNull(message);
    Preconditions.checkNotNull(location);
    this.message = message;
    this.location = location;
  }

  public SourceCodeLocation getLocation() {
    return location;
  }

  public String getMessage() {
    return message;
  }

  public String getLine() {
    if (line == null) {
      String source = location.getSourceCode().getFileContents();
      int beginLineIndex =
          location.getBeginCharacterIndex() - location.getBeginIndexInLine() + 1;
      int endLineIndex = source.indexOf('\n', location.getBeginCharacterIndex());
      if (endLineIndex == -1) {
        endLineIndex = source.length();
      }
      line = source.substring(beginLineIndex, endLineIndex);
    }
    return line;
  }

  public String format() {
    if (format == null) {
      StringBuilder sb = new StringBuilder();
      sb.append(message).append(" in ").append(location.getSourceCode().getFileName());
      sb.append(" at line ").append(location.getBeginLineNumber());
      sb.append(" column ").append(location.getBeginIndexInLine());
      sb.append(":\n").append(getLine()).append('\n');
      for (int i = 1; i < location.getBeginIndexInLine(); i++) {
        sb.append(' ');
      }
      sb.append('^').append('\n');
      format = sb.toString();
    }
    return format;
  }

  @Override
  public boolean equals(Object o) {
    // Generated by Intellij IDEA
    if (this == o) return true;
    if (!(o instanceof GssError)) return false;

    GssError gssError = (GssError) o;

    if (!location.equals(gssError.location)) return false;
    if (!message.equals(gssError.message)) return false;

    return true;
  }

  @Override
  public int hashCode() {
    return 31 * message.hashCode() + location.hashCode();
  }

  /**
   * Compare errors by source name, location and message.
   */
  @Override
  public int compareTo(GssError o) {
    String source1 = location.getSourceCode().getFileName();
    String source2 = o.location.getSourceCode().getFileName();
    if (source1 != null && source2 != null) {
      int sourceCompare = source1.compareTo(source2);
      if (sourceCompare != 0) {
        return sourceCompare;
      }
    } else if (source1 == null && source2 != null) {
      return -1;
    } else if (source1 != null && source2 == null) {
      return 1;
    }

    // source1 and source2 are the same file.
    int locationCompare = location.compareTo(o.location);
    if (locationCompare != 0) {
      return locationCompare;
    }

    return message.compareTo(o.message);
  }
}
